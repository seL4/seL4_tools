#
# Copyright 2017, Data61
# Commonwealth Scientific and Industrial Research Organisation (CSIRO)
# ABN 41 687 119 230.
#
# This software may be distributed and modified according to the terms of
# the BSD 2-Clause license. Note that NO WARRANTY is provided.
# See "LICENSE_BSD2.txt" for details.
#
# @TAG(DATA61_BSD)
#

CFLAGS :=
CPPFLAGS :=
ASFLAGS :=
CXXFLAGS :=

# CCFLAGS represent flags that will later get included into both CFLAGS and CXXFLAGS
CCFLAGS :=

# NON-KERNEL BUILD CFLAGS used by common.mk
NK_CFLAGS = $(call cc-option,-ftls-model=local-exec)
NK_CXXFLAGS =
NK_LDFLAGS =
NK_ASFLAGS =

NK_CCFLAGS =

ldflags-y += $(call cc-ldoption, -Wl$(comma)--build-id=none)

ifeq ($(CONFIG_ARCH_X86),y)
	ccflags-y += $(call cc-option,-fno-stack-protector)
	export ARCH = x86
	DEFINES += ARCH_X86
	export ARCH_X86
	export RUST_ENDIAN = little
	export RUST_ENV = gnu
	ccflags-y += $(call cc-option,-fno-pic)
	ldflags-y += -static

	NK_CFLAGS += -mtls-direct-seg-refs
endif

ifeq ($(CONFIG_ARCH_ARM),y)
	ccflags-y += $(call cc-option,-marm)
	ccflags-y += $(call cc-option,-Wtrampolines)
	export ARCH = arm
	DEFINES += ARCH_ARM
	export ARCH_ARM
	export RUST_ENDIAN = little
	export RUST_ENV = gnueabi
endif

ifeq ($(CONFIG_ARCH_IA32),y)
	ccflags-y += $(call cc-option,-m32)

	ldflags-y += -Wl,-m,elf_i386
	asflags-y += -Wa,--32

	DEFINES += IA32
	DEFINES += ARCH_IA32
	DEFINES += __KERNEL_32__
	DEFINES += X86_32
	export RUST_ARCH = x86
	export RUST_POINTER_WIDTH = 32
	export RUST_CPU = i686
	export RUST_DATA_LAYOUT = e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128
	export RUST_PRE_LINK_ARGS = -m32
	export __X86_32__ = y
	export KERNEL_32 = y
	export SEL4_ARCH = ia32
	export TYPE_SUFFIX = 32
endif

ifeq ($(CONFIG_ARCH_X86_64),y)
	cflags-y += $(call cc-option,-m64)
	cflags-y += $(call cc-option, -fno-asynchronous-unwind-tables,)
	ldflags-y  += -Wl,-m -Wl,elf_x86_64
	asflags-y  += -Wa,--64
	NK_LDFLAGS += -Wl,-m -Wl,elf_x86_64
	NK_CFLAGS  += -m64
	NK_CFLAGS  += -mno-red-zone
	NK_ASFLAGS += -Wa,--64
	DEFINES += X86_64
	DEFINES += __KERNEL_64__
	export __X86_64__ = y
	export KERNEL_64 = y
	export RUST_ARCH = x86_64
	export RUST_POINTER_WIDTH = 64
	export RUST_PRE_LINK_ARGS = -m64
	export SEL4_ARCH = x86_64
	export TYPE_SUFFIX = 64
endif

ifeq ($(CONFIG_ARCH_X86_NEHALEM), y)
	cflags-y += -march=nehalem
endif

ifeq ($(CONFIG_ARCH_X86_WESTMERE), y)
	cflags-y += -march=westmere
endif

ifeq ($(CONFIG_ARCH_X86_SANDY), y)
	cflags-y += -march=sandybridge
endif

ifeq ($(CONFIG_ARCH_X86_IVY), y)
	cflags-y += -march=ivybridge
endif

ifeq ($(CONFIG_ARCH_X86_HASWELL), y)
	cflags-y += -march=haswell
endif

ifeq ($(CONFIG_ARCH_X86_BROADWELL), y)
	cflags-y += -march=broadwell
endif

ifeq ($(CONFIG_ARCH_X86_SKYLAKE), y)
	cflags-y += -march=skylake
endif

ifeq ($(CONFIG_ARCH_AARCH32),y)
	DEFINES += AARCH32
	DEFINES += __KERNEL_32__
	export __ARM_32__ = y
	export KERNEL_32 = y
	export RUST_ARCH = arm
	export RUST_POINTER_WIDTH = 32
	export RUST_DATA_LAYOUT = e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64

    ifeq ($(CONFIG_ARM_HYPERVISOR_SUPPORT),y)
        export SEL4_ARCH = arm_hyp
        export ARM_HYP = 1
        DEFINES += ARM_HYP
    else
        export SEL4_ARCH = aarch32
    endif
	export TYPE_SUFFIX = 32
endif

ifeq ($(CONFIG_ARCH_AARCH64),y)
	DEFINES += AARCH64
	DEFINES += __KERNEL_64__
	export __ARM_64__ = y
	export KERNEL_64 = y
	export SEL4_ARCH = aarch64
	export TYPE_SUFFIX = 64
endif

ifeq ($(CONFIG_ARM1136JF_S),y)
	ccflags-y += $(call cc-option,-mcpu=arm1136jf-s,-march=armv6)
	asflags-y += $(call as-option, -Wa$(comma)-mcpu=arm1136jf-s, -Wa$(comma)-march=armv6)
	DEFINES += ARMV6
	DEFINES += ARM1136J_S
	export RUST_CPU = arm1136jf-s
	export RUST_ARCH_FEATURES += +v6
	export ARMV=armv6
	export CPU=arm1136jf-s
endif

ifeq ($(CONFIG_ARM_CORTEX_A7),y)
	ccflags-y += $(call cc-option, -mcpu=cortex-a7,-march=armv7-a)
	asflags-y += $(call as-option, -Wa$(comma)-mcpu=cortex-a7, -Wa$(comma)-march=armv7-a)
	DEFINES += ARMV7_A
	DEFINES += ARM_CORTEX_A7
	export ARMV=armv7-a
	export CPU=cortex-a7
endif

ifeq ($(CONFIG_ARM_CORTEX_A8),y)
	ccflags-y += $(call cc-option, -mcpu=cortex-a8,-march=armv7-a)
	asflags-y += $(call as-option, -Wa$(comma)-mcpu=cortex-a8, -Wa$(comma)-march=armv7-a)
	DEFINES += ARMV7_A
	DEFINES += ARM_CORTEX_A8
	export ARMV=armv7-a
	export CPU=cortex-a8
	export RUST_CPU = cortex-a8
	export RUST_ARCH_FEATURES += +v7
endif

ifeq ($(CONFIG_ARM_CORTEX_A9),y)
	ccflags-y += $(call cc-option, -mcpu=cortex-a9, -march=armv7-a)
	asflags-y += $(call as-option, -Wa$(comma)-mcpu=cortex-a9, -Wa$(comma)-march=armv7-a)
	DEFINES += ARMV7_A
	DEFINES += ARM_CORTEX_A9
	export ARMV=armv7-a
	export CPU=cortex-a9
	export RUST_CPU = cortex-a9
	export RUST_ARCH_FEATURES += +v7
endif

ifeq ($(CONFIG_ARM_CORTEX_A15),y)
	ccflags-y += $(call cc-option, -mtune=cortex-a15,)
	asflags-y += $(call as-option, -Wa$(comma)-mtune=cortex-a15,)
	asflags-y += $(call as-option, -Wa$(comma)-mcpu=cortex-a15,)
	ccflags-y += $(call cc-option,-march=armv7ve,-march=armv7-a)
	asflags-y += $(call as-option,-Wa$(comma)-march=armv7ve,-Wa$(comma)-march=armv7-a)
	DEFINES += ARMV7_A
	DEFINES += ARM_CORTEX_A15
	export ARMV=armv7-a
	export CPU=cortex-a15
	export RUST_CPU = cortex-a15
	export RUST_ARCH_FEATURES += +v7
endif

ifeq ($(CONFIG_ARM_CORTEX_A53),y)
	ccflags-y += $(call cc-option, -mtune=cortex-a53)
	ccflags-y += $(call cc-option, -march=armv8-a)
	asflags-y += $(call as-option, -Wa$(comma)-march=armv8-a)
	asflags-y += $(call as-option, -Wa$(comma)-mtune=cortex-a53)
	asflags-y += $(call as-option, -Wa$(comma)-mcpu=cortex-a53)
	DEFINES += ARMV8_A
	DEFINES += ARM_CORTEX_A53
	export ARMV=armv8-a
	export CPU=cortex-a53
	export RUST_CPU = cortex-a53
	export RUST_ARCH_FEATURES += +v8
endif

ifeq ($(CONFIG_ARM_CORTEX_A57),y)
	ccflags-y += $(call cc-option, -mtune=cortex-a57)
	ccflags-y += $(call cc-option, -march=armv8-a)
	asflags-y += $(call as-option, -Wa$(comma)-march=armv8-a)
	asflags-y += $(call as-option, -Wa$(comma)-mtune=cortex-a57)
	asflags-y += $(call as-option, -Wa$(comma)-mcpu=cortex-a57)
	DEFINES += ARMV8_A
	DEFINES += ARM_CORTEX_A57
	export ARMV=armv8-a
	export CPU=cortex-a57
	export RUST_CPU = cortex-a57
	export RUST_ARCH_FEATURES += +v8
endif

ifeq ($(CONFIG_ARCH_RISCV),y)
   ccflags-y += $(call cc-option, -Wno-error)
   DEFINES += ARCH_RISCV
   export ARCH = riscv
   export PLAT = spike

ifeq ($(CONFIG_SEL4_RV_MACHINE),y)
   export PK_FLAGS = --enable-boot-machine
else
   export PK_FLAGS = --disable-boot-machine
endif

ifeq ($(CONFIG_ARCH_RISCV_RV64),y)
   ccflags-y += $(call cc-option, -march=rv64imac)
   ccflags-y += $(call cc-option, -mabi=lp64)
   DEFINES += RISCV64
   DEFINES += __KERNEL_64__
   export KERNEL_64 = y
   export SEL4_ARCH = riscv64
   export TYPE_SUFFIX = 64
endif

ifeq ($(CONFIG_ARCH_RISCV_RV32),y)
   ccflags-y += $(call cc-option, -march=rv32ima)
   ccflags-y += $(call cc-option, -mabi=ilp32)
   DEFINES += RISCV32
   DEFINES += __KERNEL_32__
   export KERNEL_32 = y
   export SEL4_ARCH = riscv32
   export TYPE_SUFFIX = 32
endif
endif

ifeq ($(CONFIG_PLAT_KZM),y)
	DEFINES += KZM
	DEFINES += PLAT_IMX31
	export PLAT = imx31
endif

ifeq ($(CONFIG_PLAT_PC99),y)
	DEFINES += PLAT_PC99
	export PLAT = pc99
endif

ifeq ($(CONFIG_PLAT_SPIKE),y)
	DEFINES += SPIKE
	DEFINES += PLAT_SPIKE
	export PLAT = spike
endif

ifeq ($(CONFIG_PLAT_REALVIEW),y)
	DEFINES += REALVIEW
	export PLAT=realview
endif

ifeq ($(CONFIG_PLAT_OMAP3),y)
	DEFINES += OMAP3
	DEFINES += PLAT_OMAP3
	export PLAT=omap3
endif

ifeq ($(CONFIG_PLAT_AM335X),y)
	DEFINES += AM335X
	DEFINES += PLAT_AM335x
	export PLAT=am335x
endif

ifeq ($(CONFIG_PLAT_EXYNOS4),y)
	DEFINES += EXYNOS4
	DEFINES += PLAT_EXYNOS4
	export PLAT=exynos4
endif

ifeq ($(CONFIG_PLAT_EXYNOS5410),y)
	DEFINES += PLAT_EXYNOS5410 PLAT_EXYNOS54XX
	DEFINES += PLAT_EXYNOS5
	export PLAT=exynos5
endif

ifeq ($(CONFIG_PLAT_EXYNOS5422),y)
	DEFINES += PLAT_EXYNOS5422 PLAT_EXYNOS54XX
	DEFINES += PLAT_EXYNOS5
	export PLAT=exynos5
endif

ifeq ($(CONFIG_PLAT_EXYNOS5250),y)
	DEFINES += PLAT_EXYNOS5250
	DEFINES += PLAT_EXYNOS5
	export PLAT=exynos5
endif

ifeq ($(CONFIG_PLAT_APQ8064),y)
	DEFINES += PLAT_APQ8064
	export PLAT=apq8064
endif

ifeq ($(CONFIG_PLAT_IMX6),y)
	DEFINES += IMX6
	DEFINES += PLAT_IMX6
	export PLAT=imx6
endif

ifeq ($(CONFIG_PLAT_IMX7),y)
	DEFINES += IMX7
	DEFINES += PLAT_IMX7
	export PLAT=imx7
endif

ifeq ($(CONFIG_PLAT_ZYNQ7000),y)
	DEFINES += PLAT_ZYNQ7000
	export PLAT=zynq7000
endif

ifeq ($(CONFIG_PLAT_ZYNQMP),y)
	DEFINES += PLAT_ZYNQMP
	export PLAT=zynqmp
endif

ifeq ($(CONFIG_PLAT_HIKEY),y)
	DEFINES += HIKEY
	export PLAT=hikey
endif

ifeq ($(CONFIG_PLAT_TK1),y)
	DEFINES += TK1
	DEFINES += PLAT_TK1
	export PLAT=tk1
endif

ifeq ($(CONFIG_PLAT_TX1),y)
	DEFINES += TX1
	DEFINES += PLAT_TX1
	export PLAT=tx1
endif

ifeq ($(CONFIG_PLAT_BCM2837),y)
	DEFINES += BCM2837
	DEFINES += PLAT_BCM2837
	export PLAT=bcm2837
endif

ifeq ($(CONFIG_IMAGE_EFI),y)
	DEFINES += EFI
	export __EFI__ = y
endif

ifeq ($(CONFIG_IMAGE_BINARY),y)
    DEFINES += BINARY
    export __binary__ = y
endif

ifeq ($(CONFIG_SMP_ARM_MPCORE),y)
	DEFINES += CONFIG_SMP_ARM_MPCORE
endif

# work out what machine family we are running on.
ifneq (,$(filter $(PLAT), tk1 tx1))
export MACH=nvidia
else
export MACH=$(strip $(foreach mach,exynos imx omap zynq,$(findstring $(mach),$(PLAT))))
endif

# Kernel debugging.
ifeq ($(CONFIG_DEBUG_BUILD),y)
	# Set CFLAGS because we only want this to go to the kernel build system, not user
	CFLAGS += $(call cc-option,-g)
	DEFINES += DEBUG
	DEFINES += SEL4_DEBUG_KERNEL
	export DEBUG=1
endif

# Userspace debugging.
ifeq (${CONFIG_USER_DEBUG_INFO},y)
	NK_CCFLAGS += $(call cc-option,-g3,-g) $(call cc-option,-ggdb3,-ggdb) $(call cc-option,-save-temps,)
endif

ifeq (${CONFIG_USER_DEBUG_BUILD},y)
	NK_CCFLAGS += $(call cc-option, -g)
else
	DEFINES += NDEBUG
endif

ifeq (${CONFIG_USER_LINKER_GC_SECTIONS},y)
	NK_CCFLAGS += $(call cc-option, -ffunction-sections)
	NK_CCFLAGS += $(call cc-option, -fdata-sections)
	NK_LDFLAGS += -Wl,--gc-sections
endif

ifeq ($(CONFIG_DANGEROUS_CODE_INJECTION),y)
   DEFINES += DANGEROUS_CODE_INJECTION
   DEFINES += SEL4_DANGEROUS_CODE_INJECTION_KERNEL
endif

ifeq ($(CONFIG_IOMMU),y)
	DEFINES += IOMMU
endif

ifeq ($(CONFIG_VTX),y)
	DEFINES += VTX
endif

ifeq ($(CONFIG_FASTPATH),y)
	DEFINES += FASTPATH
endif

# beware, the CPPFLAGS is also used during compiling, so we don't need to
# append the macros to include paths to the CFLAGS again
CPPFLAGS += -DHAVE_AUTOCONF -I$(objtree)/include/generated ${DEFINES:%=-D%} ${cppflags-y}

# Build kernel flags
CFLAGS += ${ccflags-y} ${cflags-y} ${CCFLAGS}
CXXFLAGS += ${ccflags-y} ${cxxflags-y} ${CCFLAGS}
LDFLAGS += ${ldflags-y}
ASFLAGS += ${asflags-y}

ifneq (${CONFIG_USER_EXTRA_CFLAGS},"")
# Add Kconfig-specified cflags. Note that these can be trumped by the contents
# of CONFIG_USER_CFLAGS.
NK_CFLAGS += $(patsubst %",%,$(patsubst "%,%,${CONFIG_USER_EXTRA_CFLAGS})) # Gross double substitution because Make doesn't understand strings.
#")") Help syntax-highlighting editors.
endif

# Break up KERNEL_CFLAGS.
CONFIG_KERNEL_CFLAGS := $(shell echo "${CONFIG_KERNEL_CFLAGS}")

# Build non kernel flags
NK_CFLAGS += ${ccflags-y} ${cflags-y} ${NK_CCFLAGS}
NK_CXXFLAGS += ${ccflags-y} ${cxxflags-y} ${NK_CCFLAGS}
NK_LDFLAGS += ${ldflags-y}
NK_ASFLAGS += ${asflags-y}

export CFLAGS LDFLAGS ASFLAGS CPPFLAGS CXXFLAGS NK_CFLAGS NK_LDFLAGS NK_ASFLAGS NK_CXXFLAGS
# Export KBuild variables so the kernel's Makefile can access them.
export \
    CONFIG_OPTIMISATION_Os \
    CONFIG_OPTIMISATION_O0 \
    CONFIG_OPTIMISATION_O1 \
    CONFIG_OPTIMISATION_O2 \
    CONFIG_OPTIMISATION_O3
export \
    CONFIG_KERNEL_COMPILER \
    CONFIG_KERNEL_CFLAGS \
    CONFIG_KERNEL_EXTRA_CPPFLAGS
export \
    CONFIG_WHOLE_PROGRAM_OPTIMISATIONS_KERNEL
ifeq (${CONFIG_FASTPATH},y)
export FASTPATH=1
endif

ifeq ($(CONFIG_SMP_ARM_MPCORE),y)
export CONFIG_SMP_ARM_MPCORE
endif

ifeq ($(CONFIG_RUST_COMPILE_RELEASE), y)
export RUST_RELEASE_MODE := release
else
export RUST_RELEASE_MODE := debug
endif

RUST_CARGO_FLAGS := $(CONFIG_RUST_COMPILE_RELEASE:y=--release )
RUST_CARGO_FLAGS += $(CONFIG_RUST_COMPILE_QUIET:y=--quiet )
RUST_CARGO_FLAGS += $(CONFIG_RUST_COMPILE_VERBOSE:y=--verbose )
export RUST_CARGO_FLAGS

export RUST_CUSTOM_TARGET = ${RUST_ARCH}-sel4-linux-${RUST_ENV}
export RUST_LIBDIR = $(STAGE_BASE)/rlib/
export RUST_TARGET_FILE := $(STAGE_BASE)/common/$(RUST_CUSTOM_TARGET).json

ifeq ($(RUST_ARCH), arm)
export RUST_LLVM_TRIPLE := ${RUST_ARCH}-unknown-linux-${RUST_ENV}
else
export RUST_LLVM_TRIPLE := ${RUST_CPU}-unknown-linux-${RUST_ENV}
endif

# Allow a project to add additional project-specific flags.
-include ${PWD}/Makefile.flags
